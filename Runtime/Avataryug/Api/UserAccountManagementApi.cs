using System;
using System.Collections.Generic;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;


namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserAccountManagementApi
    {
        /// <summary>
        /// Add Email Password Adds AvatarYug username/password auth to an existing account created via an anonymous auth method, e.g. automatic device ID login.
        /// </summary>
        /// <param name="addEmailPasswordRequest">Request payload</param>
        /// <returns>AddEmailPasswordResult</returns>
        void AddEmailPassword(AddEmailPasswordRequest addEmailPasswordRequest, Action<AddEmailPasswordResult> result, Action<ApiException> error);
        /// <summary>
        /// Add Generic Service ID Adds the specified generic service identifier to the user&#39;s AvatarYug account. This is designed to allow for a AvatarYug ID lookup of any arbitrary service identifier a Project wants to add. This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other users.
        /// </summary>
        /// <param name="addGenericServiceIDRequest"></param>
        /// <returns>AddGenericServiceIDResult</returns>
        void AddGenericServiceID(AddGenericServiceIDRequest addGenericServiceIDRequest, Action<AddGenericServiceIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Add User Avatar Add Avatar to the user
        /// </summary>
        /// <param name="addUserAvatarRequest"></param>
        /// <returns>AddUserAvatarResult</returns>
        void AddUserAvatar(AddUserAvatarRequest addUserAvatarRequest, Action<AddUserAvatarResult> result, Action<ApiException> error);
        /// <summary>
        /// Delete User Avatar Delete Avatar for the user
        /// </summary>
        /// <param name="deleteUserAvatarRequest"></param>
        /// <returns>DeleteUserAvatarResult</returns>
        void DeleteUserAvatar(DeleteUserAvatarRequest deleteUserAvatarRequest, Action<DeleteUserAvatarResult> result, Action<ApiException> error);
        /// <summary>
        /// Get User Account Info Get all users data
        /// </summary>
        /// <param name="userID">Unique AvatarYug assigned ID of the user on whom the operation will be performed</param>
        /// <returns>GetUserAccountInfoResult</returns>
        void GetUserAccountInfo(string userID, Action<GetUserAccountInfoResult> result, Action<ApiException> error);
        /// <summary>
        /// Get User Profile Get Public data for the User
        /// </summary>
        /// <param name="userID">Unique AvatarYug assigned ID of the user on whom the operation will be performed</param>
        /// <param name="showDisplayName">Whether to show display name of the user</param>
        /// <param name="showThumbUrl">Whether to show user&#39;s avatar thumbnail URL</param>
        /// <param name="showAvatarUrl">Whether to show user&#39;s avatar URL</param>
        /// <returns>GetUserProfileResult</returns>
        void GetUserProfile(string userID, bool? showDisplayName, bool? showThumbUrl, bool? showAvatarUrl, Action<GetUserProfileResult> result, Action<ApiException> error);
        /// <summary>
        /// Get Users All Avatars Lists all of the avatars that belong to a specific user
        /// </summary>
        /// <param name="userID">Unique AvatarYug assigned ID of the user on whom the operation will be performed</param>
        /// <returns>GetUsersAllAvatarsResult</returns>
        void GetUsersAllAvatars(string userID, Action<GetUsersAllAvatarsResult> result, Action<ApiException> error);
        /// <summary>
        /// Link Android Device ID Links the Android device identifier to the user&#39;s AvatarYug account
        /// </summary>
        /// <param name="linkAndroidDeviceIDRequest"></param>
        /// <returns>LinkAndroidDeviceIDResult</returns>
        void LinkAndroidDeviceID(LinkAndroidDeviceIDRequest linkAndroidDeviceIDRequest, Action<LinkAndroidDeviceIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Link Apple Links the Apple account associated with the token to the user&#39;s AvatarYug account.
        /// </summary>
        /// <param name="linkAppleRequest"></param>
        /// <returns>LinkAppleResult</returns>
        void LinkApple(LinkAppleRequest linkAppleRequest, Action<LinkAppleResult> result, Action<ApiException> error);
        /// <summary>
        /// Link Custom ID Links the custom identifier, generated by the Project, to the user&#39;s AvatarYug account
        /// </summary>
        /// <param name="linkCustomIDRequest"></param>
        /// <returns>LinkCustomIDResult</returns>
        void LinkCustomID(LinkCustomIDRequest linkCustomIDRequest, Action<LinkCustomIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Link Facebook Account Links the Facebook account associated with the provided Facebook access token to the user&#39;s AvatarYug account
        /// </summary>
        /// <param name="linkFacebookAccountRequest"></param>
        /// <returns>LinkFacebookAccountResult</returns>
        void LinkFacebookAccount(LinkFacebookAccountRequest linkFacebookAccountRequest, Action<LinkFacebookAccountResult> result, Action<ApiException> error);
        /// <summary>
        /// Link Google Account Links the currently signed-in user account to their Google account, using their Google account credentials
        /// </summary>
        /// <param name="linkGoogleAccountRequest"></param>
        /// <returns>LinkGoogleAccountResult</returns>
        void LinkGoogleAccount(LinkGoogleAccountRequest linkGoogleAccountRequest, Action<LinkGoogleAccountResult> result, Action<ApiException> error);
        /// <summary>
        /// Link IOS Device ID Links the vendor-specific iOS device identifier to the user&#39;s AvatarYug account
        /// </summary>
        /// <param name="linkIOSDeviceIDRequest"></param>
        /// <returns>LinkIOSDeviceIDResult</returns>
        void LinkIOSDeviceID(LinkIOSDeviceIDRequest linkIOSDeviceIDRequest, Action<LinkIOSDeviceIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Remove Generic Service ID Removes the specified generic service identifier from the user&#39;s AvatarYug account.
        /// </summary>
        /// <returns>RemoveGenericServiceIDResult</returns>
        void RemoveGenericServiceID(Action<RemoveGenericServiceIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Unlink Android Device ID Unlinks the related Android device identifier from the user&#39;s AvatarYug account
        /// </summary>
        /// <returns>UnlinkAndroidDeviceIDResult</returns>
        void UnlinkAndroidDeviceID(Action<UnlinkAndroidDeviceIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Unlink Apple Unlinks the related Apple account from the user&#39;s AvatarYug account.
        /// </summary>
        /// <returns>UnlinkAppleResult</returns>
        void UnlinkApple(Action<UnlinkAppleResult> result, Action<ApiException> error);
        /// <summary>
        /// Unlink Custom ID Unlinks the related custom identifier from the user&#39;s AvatarYug account
        /// </summary>
        /// <returns>UnlinkCustomIDResult</returns>
        void UnlinkCustomID(Action<UnlinkCustomIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Unlink Facebook Account Unlinks the related Facebook account from the user&#39;s AvatarYug account
        /// </summary>
        /// <returns>UnlinkFacebookAccountResult</returns>
        void UnlinkFacebookAccount(Action<UnlinkFacebookAccountResult> result, Action<ApiException> error);
        /// <summary>
        /// Unlink Google Account Unlinks the related Google account from the user&#39;s AvatarYug account 
        /// </summary>
        /// <returns>UnlinkGoogleAccountResult</returns>
        void UnlinkGoogleAccount(Action<UnlinkGoogleAccountResult> result, Action<ApiException> error);
        /// <summary>
        /// Unlink IOS Device ID Unlinks the related iOS device identifier from the user&#39;s AvatarYug account
        /// </summary>
        /// <returns>UnlinkIOSDeviceIDResult</returns>
        void UnlinkIOSDeviceID(Action<UnlinkIOSDeviceIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Update Avatar Url Update the default avatar URL of the user
        /// </summary>
        /// <param name="updateAvatarUrlRequest"></param>
        /// <returns>UpdateAvatarUrlResult</returns>
        void UpdateAvatarUrl(UpdateAvatarUrlRequest updateAvatarUrlRequest, Action<UpdateAvatarUrlResult> result, Action<ApiException> error);
        /// <summary>
        /// Update Avatar Image Url Update the avatar URL of the user
        /// </summary>
        /// <param name="updateImageAvatarUrlRequest"></param>
        /// <returns>UpdateImageAvatarUrlResult</returns>
        void UpdateImageAvatarUrl(UpdateImageAvatarUrlRequest updateImageAvatarUrlRequest, Action<UpdateImageAvatarUrlResult> result, Action<ApiException> error);
        /// <summary>
        /// Update User Avatar Update Avatar for the user
        /// </summary>
        /// <param name="updateUserAvatarRequest"></param>
        /// <returns>UpdateUserAvatarResult</returns>
        void UpdateUserAvatar(UpdateUserAvatarRequest updateUserAvatarRequest, Action<UpdateUserAvatarResult> result, Action<ApiException> error);
        /// <summary>
        /// Update User Display Name Updates the display name for the user in the project
        /// </summary>
        /// <param name="updateUserProjectDisplayNameRequest"></param>
        /// <returns>UpdateUserProjectDisplayNameResult</returns>
        void UpdateUserProjectDisplayName(UpdateUserProjectDisplayNameRequest updateUserProjectDisplayNameRequest, Action<UpdateUserProjectDisplayNameResult> result, Action<ApiException> error);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UserAccountManagementApi : IUserAccountManagementApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountManagementApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public UserAccountManagementApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient;
            else
                this.ApiClient = apiClient;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserAccountManagementApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }

        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Add Email Password Adds AvatarYug username/password auth to an existing account created via an anonymous auth method, e.g. automatic device ID login.
        /// </summary>
        /// <param name="addEmailPasswordRequest">Request payload</param>
        /// <returns>AddEmailPasswordResult</returns>
        public async void AddEmailPassword(AddEmailPasswordRequest addEmailPasswordRequest, Action<AddEmailPasswordResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/AddEmailPassword";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(addEmailPasswordRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling AddEmailPassword: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling AddEmailPassword: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((AddEmailPasswordResult)ApiClient.Deserialize(response.Content, typeof(AddEmailPasswordResult), response.Headers));
        }

        /// <summary>
        /// Add Generic Service ID Adds the specified generic service identifier to the user&#39;s AvatarYug account. This is designed to allow for a AvatarYug ID lookup of any arbitrary service identifier a Project wants to add. This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other users.
        /// </summary>
        /// <param name="addGenericServiceIDRequest"></param>
        /// <returns>AddGenericServiceIDResult</returns>
        public async void AddGenericServiceID(AddGenericServiceIDRequest addGenericServiceIDRequest,
            Action<AddGenericServiceIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/AddGenericServiceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(addGenericServiceIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling AddGenericServiceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling AddGenericServiceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result.Invoke((AddGenericServiceIDResult)ApiClient.Deserialize(response.Content, typeof(AddGenericServiceIDResult), response.Headers));
        }

        /// <summary>
        /// Add User Avatar Add Avatar to the user
        /// </summary>
        /// <param name="addUserAvatarRequest"></param>
        /// <returns>AddUserAvatarResult</returns>
        public async void AddUserAvatar(AddUserAvatarRequest addUserAvatarRequest, Action<AddUserAvatarResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/AddUserAvatar";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(addUserAvatarRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling AddUserAvatar: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling AddUserAvatar: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((AddUserAvatarResult)ApiClient.Deserialize(response.Content, typeof(AddUserAvatarResult), response.Headers));
        }

        /// <summary>
        /// Delete User Avatar Delete Avatar for the user
        /// </summary>
        /// <param name="deleteUserAvatarRequest"></param>
        /// <returns>DeleteUserAvatarResult</returns>
        public async void DeleteUserAvatar(DeleteUserAvatarRequest deleteUserAvatarRequest, Action<DeleteUserAvatarResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/DeleteUserAvatar";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(deleteUserAvatarRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling DeleteUserAvatar: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling DeleteUserAvatar: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((DeleteUserAvatarResult)ApiClient.Deserialize(response.Content, typeof(DeleteUserAvatarResult), response.Headers));
        }

        /// <summary>
        /// Get User Account Info Get all users data
        /// </summary>
        /// <param name="userID">Unique AvatarYug assigned ID of the user on whom the operation will be performed</param>
        /// <returns>GetUserAccountInfoResult</returns>
        public async void GetUserAccountInfo(string userID, Action<GetUserAccountInfoResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            // verify the required parameter 'userID' is set
            if (userID == null) throw new ApiException(400, "Missing required parameter 'userID' when calling GetUserAccountInfo");


            var path = "/GetUserAccountInfo";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            if (userID != null) queryParams.Add("UserID", ApiClient.ParameterToString(userID)); // query parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling GetUserAccountInfo: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling GetUserAccountInfo: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((GetUserAccountInfoResult)ApiClient.Deserialize(response.Content, typeof(GetUserAccountInfoResult), response.Headers));
        }

        /// <summary>
        /// Get User Profile Get Public data for the User
        /// </summary>
        /// <param name="userID">Unique AvatarYug assigned ID of the user on whom the operation will be performed</param>
        /// <param name="showDisplayName">Whether to show display name of the user</param>
        /// <param name="showThumbUrl">Whether to show user&#39;s avatar thumbnail URL</param>
        /// <param name="showAvatarUrl">Whether to show user&#39;s avatar URL</param>
        /// <returns>GetUserProfileResult</returns>
        ///

        public async void GetUserProfile(string userID, bool? showDisplayName, bool? showThumbUrl, bool? showAvatarUrl, Action<GetUserProfileResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            // verify the required parameter 'userID' is set
            if (userID == null) throw new ApiException(400, "Missing required parameter 'userID' when calling GetUserProfile");


            var path = "/GetUserProfile";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            if (userID != null) queryParams.Add("UserID", ApiClient.ParameterToString(userID)); // query parameter
            if (showDisplayName != null) queryParams.Add("ShowDisplayName", ApiClient.ParameterToString(showDisplayName)); // query parameter
            if (showThumbUrl != null) queryParams.Add("ShowThumbUrl", ApiClient.ParameterToString(showThumbUrl)); // query parameter
            if (showAvatarUrl != null) queryParams.Add("ShowAvatarUrl", ApiClient.ParameterToString(showAvatarUrl)); // query parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };


            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling GetUserProfile: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling GetUserProfile: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((GetUserProfileResult)ApiClient.Deserialize(response.Content, typeof(GetUserProfileResult), response.Headers));

        }

        /// <summary>
        /// Get Users All Avatars Lists all of the avatars that belong to a specific user
        /// </summary>
        /// <param name="userID">Unique AvatarYug assigned ID of the user on whom the operation will be performed</param>
        /// <returns>GetUsersAllAvatarsResult</returns>
        public async void GetUsersAllAvatars(string userID, Action<GetUsersAllAvatarsResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            // verify the required parameter 'userID' is set
            if (userID == null) throw new ApiException(400, "Missing required parameter 'userID' when calling GetUsersAllAvatars");


            var path = "/GetUsersAllAvatars";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            if (userID != null) queryParams.Add("UserID", ApiClient.ParameterToString(userID)); // query parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling GetUsersAllAvatars: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling GetUsersAllAvatars: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((GetUsersAllAvatarsResult)ApiClient.Deserialize(response.Content, typeof(GetUsersAllAvatarsResult), response.Headers));
        }

        /// <summary>
        /// Link Android Device ID Links the Android device identifier to the user&#39;s AvatarYug account
        /// </summary>
        /// <param name="linkAndroidDeviceIDRequest"></param>
        /// <returns>LinkAndroidDeviceIDResult</returns>
        public async void LinkAndroidDeviceID(LinkAndroidDeviceIDRequest linkAndroidDeviceIDRequest, Action<LinkAndroidDeviceIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/LinkAndroidDeviceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(linkAndroidDeviceIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkAndroidDeviceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkAndroidDeviceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((LinkAndroidDeviceIDResult)ApiClient.Deserialize(response.Content, typeof(LinkAndroidDeviceIDResult), response.Headers));
        }

        /// <summary>
        /// Link Apple Links the Apple account associated with the token to the user&#39;s AvatarYug account.
        /// </summary>
        /// <param name="linkAppleRequest"></param>
        /// <returns>LinkAppleResult</returns>
        public async void LinkApple(LinkAppleRequest linkAppleRequest, Action<LinkAppleResult> result, Action<ApiException> error)
        {

            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/LinkApple";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(linkAppleRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkApple: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkApple: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((LinkAppleResult)ApiClient.Deserialize(response.Content, typeof(LinkAppleResult), response.Headers));
        }

        /// <summary>
        /// Link Custom ID Links the custom identifier, generated by the Project, to the user&#39;s AvatarYug account
        /// </summary>
        /// <param name="linkCustomIDRequest"></param>
        /// <returns>LinkCustomIDResult</returns>
        public async void LinkCustomID(LinkCustomIDRequest linkCustomIDRequest, Action<LinkCustomIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/LinkCustomID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(linkCustomIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkCustomID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkCustomID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((LinkCustomIDResult)ApiClient.Deserialize(response.Content, typeof(LinkCustomIDResult), response.Headers));
        }

        /// <summary>
        /// Link Facebook Account Links the Facebook account associated with the provided Facebook access token to the user&#39;s AvatarYug account
        /// </summary>
        /// <param name="linkFacebookAccountRequest"></param>
        /// <returns>LinkFacebookAccountResult</returns>
        public async void LinkFacebookAccount(LinkFacebookAccountRequest linkFacebookAccountRequest, Action<LinkFacebookAccountResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/LinkFacebookAccount";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(linkFacebookAccountRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkFacebookAccount: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkFacebookAccount: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result.Invoke((LinkFacebookAccountResult)ApiClient.Deserialize(response.Content, typeof(LinkFacebookAccountResult), response.Headers));
        }

        /// <summary>
        /// Link Google Account Links the currently signed-in user account to their Google account, using their Google account credentials
        /// </summary>
        /// <param name="linkGoogleAccountRequest"></param>
        /// <returns>LinkGoogleAccountResult</returns>
        public async void LinkGoogleAccount(LinkGoogleAccountRequest linkGoogleAccountRequest, Action<LinkGoogleAccountResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/LinkGoogleAccount";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(linkGoogleAccountRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkGoogleAccount: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkGoogleAccount: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((LinkGoogleAccountResult)ApiClient.Deserialize(response.Content, typeof(LinkGoogleAccountResult), response.Headers));
        }

        /// <summary>
        /// Link IOS Device ID Links the vendor-specific iOS device identifier to the user&#39;s AvatarYug account
        /// </summary>
        /// <param name="linkIOSDeviceIDRequest"></param>
        /// <returns>LinkIOSDeviceIDResult</returns>
        public async void LinkIOSDeviceID(LinkIOSDeviceIDRequest linkIOSDeviceIDRequest, Action<LinkIOSDeviceIDResult> result, Action<ApiException> error)
        {

            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/LinkIOSDeviceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(linkIOSDeviceIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkIOSDeviceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LinkIOSDeviceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((LinkIOSDeviceIDResult)ApiClient.Deserialize(response.Content, typeof(LinkIOSDeviceIDResult), response.Headers));
        }

        /// <summary>
        /// Remove Generic Service ID Removes the specified generic service identifier from the user&#39;s AvatarYug account.
        /// </summary>
        /// <returns>RemoveGenericServiceIDResult</returns>
        public async void RemoveGenericServiceID(Action<RemoveGenericServiceIDResult> result, Action<ApiException> error)
        {

            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/RemoveGenericServiceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling RemoveGenericServiceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling RemoveGenericServiceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((RemoveGenericServiceIDResult)ApiClient.Deserialize(response.Content, typeof(RemoveGenericServiceIDResult), response.Headers));
        }

        /// <summary>
        /// Unlink Android Device ID Unlinks the related Android device identifier from the user&#39;s AvatarYug account
        /// </summary>
        /// <returns>UnlinkAndroidDeviceIDResult</returns>
        public async void UnlinkAndroidDeviceID(Action<UnlinkAndroidDeviceIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/UnlinkAndroidDeviceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkAndroidDeviceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkAndroidDeviceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result.Invoke((UnlinkAndroidDeviceIDResult)ApiClient.Deserialize(response.Content, typeof(UnlinkAndroidDeviceIDResult), response.Headers));
        }

        /// <summary>
        /// Unlink Apple Unlinks the related Apple account from the user&#39;s AvatarYug account.
        /// </summary>
        /// <returns>UnlinkAppleResult</returns>
        public async void UnlinkApple(Action<UnlinkAppleResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/UnlinkApple";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkApple: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkApple: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((UnlinkAppleResult)ApiClient.Deserialize(response.Content, typeof(UnlinkAppleResult), response.Headers));
        }

        /// <summary>
        /// Unlink Custom ID Unlinks the related custom identifier from the user&#39;s AvatarYug account
        /// </summary>
        /// <returns>UnlinkCustomIDResult</returns>
        public async void UnlinkCustomID(Action<UnlinkCustomIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/UnlinkCustomID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkCustomID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkCustomID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result.Invoke((UnlinkCustomIDResult)ApiClient.Deserialize(response.Content, typeof(UnlinkCustomIDResult), response.Headers));
        }

        /// <summary>
        /// Unlink Facebook Account Unlinks the related Facebook account from the user&#39;s AvatarYug account
        /// </summary>
        /// <returns>UnlinkFacebookAccountResult</returns>
        public async void UnlinkFacebookAccount(Action<UnlinkFacebookAccountResult> result, Action<ApiException> error)
        {

            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/UnlinkFacebookAccount";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkFacebookAccount: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkFacebookAccount: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result.Invoke((UnlinkFacebookAccountResult)ApiClient.Deserialize(response.Content, typeof(UnlinkFacebookAccountResult), response.Headers));
        }

        /// <summary>
        /// Unlink Google Account Unlinks the related Google account from the user&#39;s AvatarYug account 
        /// </summary>
        /// <returns>UnlinkGoogleAccountResult</returns>
        public async void UnlinkGoogleAccount(Action<UnlinkGoogleAccountResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/UnlinkGoogleAccount";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkGoogleAccount: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkGoogleAccount: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((UnlinkGoogleAccountResult)ApiClient.Deserialize(response.Content, typeof(UnlinkGoogleAccountResult), response.Headers));
        }

        /// <summary>
        /// Unlink IOS Device ID Unlinks the related iOS device identifier from the user&#39;s AvatarYug account
        /// </summary>
        /// <returns>UnlinkIOSDeviceIDResult</returns>
        public async void UnlinkIOSDeviceID(Action<UnlinkIOSDeviceIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/UnlinkIOSDeviceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkIOSDeviceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UnlinkIOSDeviceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((UnlinkIOSDeviceIDResult)ApiClient.Deserialize(response.Content, typeof(UnlinkIOSDeviceIDResult), response.Headers));

        }

        /// <summary>
        /// Update Avatar Url Update the default avatar URL of the user
        /// </summary>
        /// <param name="updateAvatarUrlRequest"></param>
        /// <returns>UpdateAvatarUrlResult</returns>
        public async void UpdateAvatarUrl(UpdateAvatarUrlRequest updateAvatarUrlRequest, Action<UpdateAvatarUrlResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/UpdateAvatarUrl";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(updateAvatarUrlRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateAvatarUrl: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateAvatarUrl: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result.Invoke((UpdateAvatarUrlResult)ApiClient.Deserialize(response.Content, typeof(UpdateAvatarUrlResult), response.Headers));
        }

        /// <summary>
        /// Update Avatar Image Url Update the avatar URL of the user
        /// </summary>
        /// <param name="updateImageAvatarUrlRequest"></param>
        /// <returns>UpdateImageAvatarUrlResult</returns>
        public async void UpdateImageAvatarUrl(UpdateImageAvatarUrlRequest updateImageAvatarUrlRequest, Action<UpdateImageAvatarUrlResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/UpdateImageAvatarUrl";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(updateImageAvatarUrlRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateImageAvatarUrl: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateImageAvatarUrl: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((UpdateImageAvatarUrlResult)ApiClient.Deserialize(response.Content, typeof(UpdateImageAvatarUrlResult), response.Headers));
        }

        /// <summary>
        /// Update User Avatar Update Avatar for the user
        /// </summary>
        /// <param name="updateUserAvatarRequest"></param>
        /// <returns>UpdateUserAvatarResult</returns>
        public async void UpdateUserAvatar(UpdateUserAvatarRequest updateUserAvatarRequest, Action<UpdateUserAvatarResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/UpdateUserAvatar";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(updateUserAvatarRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateUserAvatar: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateUserAvatar: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result.Invoke((UpdateUserAvatarResult)ApiClient.Deserialize(response.Content, typeof(UpdateUserAvatarResult), response.Headers));
        }

        /// <summary>
        /// Update User Display Name Updates the display name for the user in the project
        /// </summary>
        /// <param name="updateUserProjectDisplayNameRequest"></param>
        /// <returns>UpdateUserProjectDisplayNameResult</returns>
        public async void UpdateUserProjectDisplayName(UpdateUserProjectDisplayNameRequest updateUserProjectDisplayNameRequest, Action<UpdateUserProjectDisplayNameResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/UpdateUserProjectDisplayName";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(updateUserProjectDisplayNameRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateUserProjectDisplayName: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateUserProjectDisplayName: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((UpdateUserProjectDisplayNameResult)ApiClient.Deserialize(response.Content, typeof(UpdateUserProjectDisplayNameResult), response.Headers));
        }

    }
}



