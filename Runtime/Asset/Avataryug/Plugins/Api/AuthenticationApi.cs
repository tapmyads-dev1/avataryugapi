using System;
using RestSharp;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Collections.Generic;
using UnityEngine;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi
    {
        /// <summary>
        /// Login With Android Device ID Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithAndroidDeviceIDRequest"></param>
        /// <returns>LoginWithAndroidDeviceIDResult</returns>
        void LoginWithAndroidDeviceID(LoginWithAndroidDeviceIDRequest loginWithAndroidDeviceIDRequest, Action<LoginWithAndroidDeviceIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Login With Apple Signs in the user with a Sign in with Apple identity token.
        /// </summary>
        /// <param name="loginWithAppleRequest"></param>
        /// <returns>LoginWithAppleResult</returns>
        void LoginWithApple(LoginWithAppleRequest loginWithAppleRequest, Action<LoginWithAppleResult> result, Action<ApiException> error);
        /// <summary>
        /// Login With Custom ID Signs the user in using a custom unique identifier generated by the Project, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithCustomIDRequest"></param>
        /// <returns>LoginWithCustomIDResult</returns>
        void LoginWithCustomID(LoginWithCustomIDRequest loginWithCustomIDRequest, Action<LoginWithCustomIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Login With Email Address Signs the user into the AvatarYug account, returning a session identifier that can subsequently be used for API calls which require an authenticated user. Unlike most other login API calls, LoginWithEmailAddress does not permit the creation of new accounts via the CreateAccountFlag. E
        /// </summary>
        /// <param name="loginWithEmailAddressRequest"></param>
        /// <returns>LoginWithEmailAddressResult</returns>
        void LoginWithEmailAddress(LoginWithEmailAddressRequest loginWithEmailAddressRequest, Action<LoginWithEmailAddressResult> result, Action<ApiException> error);
        /// <summary>
        /// Login With Facebook Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithFacebookRequest"></param>
        /// <returns>LoginWithFacebookResult</returns>
        void LoginWithFacebook(LoginWithFacebookRequest loginWithFacebookRequest, Action<LoginWithFacebookResult> result, Action<ApiException> error);
        /// <summary>
        /// Login With Google Account Signs the user in using their Google account credentials
        /// </summary>
        /// <param name="loginWithGoogleRequest"></param>
        /// <returns>LoginWithGoogleResult</returns>
        void LoginWithGoogle(LoginWithGoogleRequest loginWithGoogleRequest, Action<LoginWithGoogleResult> result, Action<ApiException> error);
        /// <summary>
        /// Login With IOS Device ID Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithIOSDeviceIDRequest"></param>
        /// <returns>LoginWithIOSDeviceIDResult</returns>
        void LoginWithIOSDeviceID(LoginWithIOSDeviceIDRequest loginWithIOSDeviceIDRequest, Action<LoginWithIOSDeviceIDResult> result, Action<ApiException> error);
        /// <summary>
        /// Change Password 
        /// </summary>
        /// <param name="changePasswordRequest"></param>
        /// <returns>ChangePasswordResponse</returns>
        void ChangePassword(ChangePasswordRequest changePasswordRequest, Action<ChangePasswordResponse> result, Action<ApiException> error);

        /// <summary>
        /// Update Email Password 
        /// </summary>
        /// <param name="updateEmailPasswordRequest"></param>
        /// <returns>UpdateEmailPasswordResponse</returns>
        void UpdateEmailPassword(UpdateEmailPasswordRequest updateEmailPasswordRequest, Action<UpdateEmailPasswordResponse> result, Action<ApiException> error);

        /// <summary>
        /// Verify User With Email 
        /// </summary>
        /// <param name="verifyUserWithEmailRequest"></param>
        /// <returns>VerifyUserWithEmailResponse</returns>
        void VerifyUserWithEmail(VerifyUserWithEmailRequest verifyUserWithEmailRequest, Action<VerifyUserWithEmailResponse> result, Action<ApiException> error);

        /// <summary>
        /// Send Account Verification Email 
        /// </summary>
        /// <param name="sendAccountVerificationEmailRequest"></param>
        /// <returns>SendAccountVerificationEmailResponse</returns>
        void SendAccountVerificationEmail(SendAccountVerificationEmailRequest sendAccountVerificationEmailRequest, Action<SendAccountVerificationEmailResponse> result, Action<ApiException> error);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AuthenticationApi : IAuthenticationApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public AuthenticationApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient;
            else
                this.ApiClient = apiClient;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }

        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Change Password 
        /// </summary>
        /// <param name="changePasswordRequest"></param>
        /// <returns>ChangePasswordResponse</returns>
        public async void ChangePassword(ChangePasswordRequest changePasswordRequest, Action<ChangePasswordResponse> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/ChangePassword";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(changePasswordRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling ChangePassword: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling ChangePassword: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((ChangePasswordResponse)ApiClient.Deserialize(response.Content, typeof(ChangePasswordResponse), response.Headers));
        }

        /// <summary>
        /// Login With Android Device ID Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithAndroidDeviceIDRequest"></param>
        /// <returns>LoginWithAndroidDeviceIDResult</returns>
        public async void LoginWithAndroidDeviceID(LoginWithAndroidDeviceIDRequest loginWithAndroidDeviceIDRequest, Action<LoginWithAndroidDeviceIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/LoginWithAndroidDeviceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithAndroidDeviceIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithAndroidDeviceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithAndroidDeviceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((LoginWithAndroidDeviceIDResult)ApiClient.Deserialize(response.Content, typeof(LoginWithAndroidDeviceIDResult), response.Headers));

        }

        /// <summary>
        /// Login With Apple Signs in the user with a Sign in with Apple identity token.
        /// </summary>
        /// <param name="loginWithAppleRequest"></param>
        /// <returns>LoginWithAppleResult</returns>
        public async void LoginWithApple(LoginWithAppleRequest loginWithAppleRequest, Action<LoginWithAppleResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/LoginWithApple";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithAppleRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithApple: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithApple: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((LoginWithAppleResult)ApiClient.Deserialize(response.Content, typeof(LoginWithAppleResult), response.Headers));
        }

        /// <summary>
        /// Login With Custom ID Signs the user in using a custom unique identifier generated by the Project, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithCustomIDRequest"></param>
        /// <returns>LoginWithCustomIDResult</returns>
        public async void LoginWithCustomID(LoginWithCustomIDRequest loginWithCustomIDRequest, Action<LoginWithCustomIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/LoginWithCustomID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithCustomIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            var response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
            // make the HTTP request
            //IRestResponse response = (IRestResponse)ApiClient.CallApiAsync(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);


            if (((int)response.StatusCode) >= 400)
            {

                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithCustomID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithCustomID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((LoginWithCustomIDResult)ApiClient.Deserialize(response.Content, typeof(LoginWithCustomIDResult), response.Headers));

        }

        /// <summary>
        /// Login With Email Address Signs the user into the AvatarYug account, returning a session identifier that can subsequently be used for API calls which require an authenticated user. Unlike most other login API calls, LoginWithEmailAddress does not permit the creation of new accounts via the CreateAccountFlag. E
        /// </summary>
        /// <param name="loginWithEmailAddressRequest"></param>
        /// <returns>LoginWithEmailAddressResult</returns>
        public async void LoginWithEmailAddress(LoginWithEmailAddressRequest loginWithEmailAddressRequest, Action<LoginWithEmailAddressResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/LoginWithEmailAddress";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithEmailAddressRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);


            Debug.Log("Login" + response.Content);
            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithEmailAddress: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithEmailAddress: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((LoginWithEmailAddressResult)ApiClient.Deserialize(response.Content, typeof(LoginWithEmailAddressResult), response.Headers));
        }

        /// <summary>
        /// Login With Facebook Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithFacebookRequest"></param>
        /// <returns>LoginWithFacebookResult</returns>
        public async void LoginWithFacebook(LoginWithFacebookRequest loginWithFacebookRequest, Action<LoginWithFacebookResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/LoginWithFacebook";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithFacebookRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithFacebook: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithFacebook: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((LoginWithFacebookResult)ApiClient.Deserialize(response.Content, typeof(LoginWithFacebookResult), response.Headers));
        }

        /// <summary>
        /// Login With Google Account Signs the user in using their Google account credentials
        /// </summary>
        /// <param name="loginWithGoogleRequest"></param>
        /// <returns>LoginWithGoogleResult</returns>
        public async void LoginWithGoogle(LoginWithGoogleRequest loginWithGoogleRequest, Action<LoginWithGoogleResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }


            var path = "/LoginWithGoogle";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithGoogleRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithGoogle: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithGoogle: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((LoginWithGoogleResult)ApiClient.Deserialize(response.Content, typeof(LoginWithGoogleResult), response.Headers));
        }

        /// <summary>
        /// Login With IOS Device ID Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithIOSDeviceIDRequest"></param>
        /// <returns>LoginWithIOSDeviceIDResult</returns>
        public async void LoginWithIOSDeviceID(LoginWithIOSDeviceIDRequest loginWithIOSDeviceIDRequest, Action<LoginWithIOSDeviceIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                UnityEngine.Debug.LogError("ProjectId is not present");
                return;
            }

            var path = "/LoginWithIOSDeviceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithIOSDeviceIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithIOSDeviceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithIOSDeviceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((LoginWithIOSDeviceIDResult)ApiClient.Deserialize(response.Content, typeof(LoginWithIOSDeviceIDResult), response.Headers));
        }

        public async void UpdateEmailPassword(UpdateEmailPasswordRequest updateEmailPasswordRequest, Action<UpdateEmailPasswordResponse> result, Action<ApiException> error)
        {
            var path = "/UpdateEmailPassword";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(updateEmailPasswordRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateEmailPassword: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling UpdateEmailPassword: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((UpdateEmailPasswordResponse)ApiClient.Deserialize(response.Content, typeof(UpdateEmailPasswordResponse), response.Headers));
        }

        public async void VerifyUserWithEmail(VerifyUserWithEmailRequest verifyUserWithEmailRequest, Action<VerifyUserWithEmailResponse> result, Action<ApiException> error)
        {


            var path = "/VerifyUserWithEmail";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(verifyUserWithEmailRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling VerifyUserWithEmail: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling VerifyUserWithEmail: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            if (response != null)
            {
                Debug.Log("THE Verfiy" + response.Content);
            }

            result?.Invoke((VerifyUserWithEmailResponse)ApiClient.Deserialize(response.Content, typeof(VerifyUserWithEmailResponse), response.Headers));
        }

        public async void SendAccountVerificationEmail(SendAccountVerificationEmailRequest sendAccountVerificationEmailRequest, Action<SendAccountVerificationEmailResponse> result, Action<ApiException> error)
        {


            var path = "/SendAccountVerificationEmail";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(sendAccountVerificationEmailRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling SendAccountVerificationEmail: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling SendAccountVerificationEmail: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((SendAccountVerificationEmailResponse)ApiClient.Deserialize(response.Content, typeof(SendAccountVerificationEmailResponse), response.Headers));
        }
    }
}